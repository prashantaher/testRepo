---
swagger: "2.0"
info:
  description: "This is a sample equipmentworkOrder server.  You can find \nout more about Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: 1.0.0
  title: Swagger equipment & workOrder
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /S3471/Equipment/1.0.0
tags:
- name: equipment
  description: Everything about your equipments
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: workOrder
  description: Access to equipment workOrders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our workOrder
    url: http://swagger.io
schemes:
- https
- http
paths:
  /equipment:
    post:
      summary: Add a new equipment
      operationId: addequipment
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: equipment object that needs to be added
        required: true
        schema:
          $ref: '#/definitions/equipment'
      responses:
        405:
          description: Invalid input
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
    put:
      tags:
      - equipment
      summary: Update an existing equipment
      operationId: updateEquipment
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Equipment object that needs to be added to the Maintenance System
        required: true
        schema:
          $ref: '#/definitions/equipment'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Equipment not found
        405:
          description: Validation exception
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
  /equipment/findByStatus:
    get:
      tags:
      - equipment
      summary: Finds equipments by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findequipmentsByStatus
      produces:
      - application/json
      - application/xml
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/equipment'
        400:
          description: Invalid status value
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
  /equipment/{equipmentId}:
    get:
      tags:
      - equipment
      summary: Find equipment by ID
      description: Returns a single equipment
      operationId: getequipmentById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: equipmentId
        in: path
        description: ID of equipment to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/equipment'
        400:
          description: Invalid ID supplied
        404:
          description: equipment not found
      security:
      - api_key: []
    post:
      tags:
      - equipment
      summary: Updates a equipment in the workOrder with form data
      operationId: updateequipmentWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      - application/xml
      parameters:
      - name: equipmentId
        in: path
        description: ID of equipment that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the equipment
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the equipment
        required: false
        type: string
      responses:
        405:
          description: Invalid input
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
    delete:
      tags:
      - equipment
      summary: Deletes a equipment
      operationId: deleteequipment
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: equipmentId
        in: path
        description: equipment id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: equipment not found
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
  /equipment/{equipmentId}/uploadImage:
    post:
      tags:
      - equipment
      summary: uploads an image
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: equipmentId
        in: path
        description: ID of equipment to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
      security:
      - equipmentworkOrder_auth:
        - write:equipments
        - read:equipments
  /workOrder/equipment/{equipmentId}:
    get:
      tags:
      - workOrder
      summary: Returns WorkOrders for given equipment
      description: Returns a list of WorkOrder
      operationId: getInventory
      produces:
      - application/json
      parameters:
      - name: equipmentId
        in: path
        description: ID of equipment to update
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            type: object
            additionalProperties:
              type: integer
              format: int32
      security:
      - api_key: []
  /workOrder:
    post:
      tags:
      - workOrder
      summary: Place an order for a equipment
      operationId: placeOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: order placed for purchasing the equipment
        required: true
        schema:
          $ref: '#/definitions/WorkOrder'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/WorkOrder'
        400:
          description: Invalid Order
  /workOrder/{workOrderId}:
    get:
      tags:
      - workOrder
      summary: Find Work order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getWorkOrderById
      produces:
      - application/json
      - application/xml
      parameters:
      - name: workOrderId
        in: path
        description: ID of work order that needs to be fetched
        required: true
        type: integer
        maximum: 10
        minimum: 1
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/equipment'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
    delete:
      tags:
      - workOrder
      summary: Delete work order by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteWorkOrder
      produces:
      - application/json
      - application/xml
      parameters:
      - name: workOrderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
securityDefinitions:
  equipmentworkOrder_auth:
    type: oauth2
    authorizationUrl: http://equipmentworkOrder.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:equipments: modify equipments in your account
      read:equipments: read your equipments
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  WorkOrder:
    type: object
    properties:
      id:
        type: integer
        format: int64
      equipmentId:
        type: integer
        format: int64
      description:
        type: string
        description: description of the work order
      ActualStartDate:
        type: string
        format: date-time
      ActualEndDate:
        type: string
        format: date-time
      status:
        type: string
        description: Work Order Status
        enum:
        - created
        - inprocess
        - completed
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  equipment:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: equipment status in the workOrder
        enum:
        - available
        - pending
        - sold
    xml:
      name: equipment
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
